{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CV","text":""},{"location":"#summary","title":"Summary","text":"<p>Systems Integration Engineer and Developer with over 20 years of experience.</p> <p>I have extensive experience in UNIX/Linux environments within the ISP/Telecom industries. For the past decade, I have focused on the development and integration of systems at Gibtelecom, including implementing monitoring systems, integrating multiple systems into a unified provisioning platform and achieving ISO 27001 compliance for secure development.</p>"},{"location":"#contact","title":"Contact","text":"<ul> <li>Email: dlicudi@gmail.com</li> <li>LinkedIn: linkedin.com/in/dlicudi</li> <li>GitHub: github.com/dlicudi</li> </ul>"},{"location":"#experience","title":"Experience","text":""},{"location":"#gibtelecom-gibraltar","title":"Gibtelecom, Gibraltar","text":"<p>Lead Developer at Gibtelecom, responsible for all development and integration of key systems.</p> <ul> <li>Position: Lead Developer</li> <li>Duration: Jan 2013 - July 2023</li> </ul> <p>Key Achievements</p> <ul> <li>Monitoring system using Check_MK monitoring over 60k services.</li> <li>Flask/MongoDB based provisioning platform used company wide by Engineers and customer facing staff.</li> <li>Django/PostgreSQL based migration portal to facilitate migration of telephone subscribers from SystemX to IMS platform.</li> <li>Django/PostgreSQL based migration portal to facilitate migration of legacy broadband subscribers to FTTH (Fibre to the home).</li> <li>Support and integration of Ericsson's provisioning platforms (EMA/EDA) with BSS platform.</li> <li>Django/PostgreSQL and FastAPI based SMS API to provide a customer-facing service.</li> <li>Standardised process for new standard operating procedures adopted across Technology Directorate.</li> <li>Python/MongoDB based automated MVNO number porting system.</li> <li>Python and MySQL based mediation platform to facilitate data warehousing and interfacing of usage records for an MVNO.</li> <li>Conducted MVNO penetration testing successfully finding numerous security vulnerabilties that could be patched before launch.</li> <li>Achieved ISO 27001 certification for secure development.</li> <li>Established secure development procedures and processes aligned with ISO 27001.</li> <li>CI/CD pipelines using BASH scripts (unit testing, vulnerability code scanning, building and deploying from BitBucket Git repositories).</li> </ul>"},{"location":"#betvictor-gibraltar","title":"BetVictor, Gibraltar","text":"<p>Middleware Engineer responsible for improving performance and monitoring of critical systems like Oracle Coherence, ActiveMQ, and Apache web servers.</p> <ul> <li>Position: Enterprise Services Engineer</li> <li>Duration: Jan 2013 - Dec 2013</li> </ul> <p>Key Achievements</p> <ul> <li>Splunk health monitoring of Oracle Coherence and ActiveMQ using , enhancing system visibility and troubleshooting capabilities.</li> <li>Improved deployment processes that eliminated Oracle Coherence downtime, significantly improving deployment reliability.</li> <li>Diagnosed and fixed configuration issues with the mobile website that had been affected by downtime, ensuring seamless service delivery.</li> <li>Performed MySQL database optimisations on a live betting platform, significantly improving performance and enabling more events to run in parallel.</li> </ul>"},{"location":"#licudi-it-consulting-ltd-gibraltar","title":"Licudi IT Consulting Ltd, Gibraltar","text":"<p>IT consultant specialising in Windows Server 2003 administration, Google Apps for Business setup and management and development of in-house applications.</p> <ul> <li>Position: IT Consultant</li> <li>Duration: 2010 - 2012</li> </ul> <p>Key Achievements</p> <ul> <li>Designed IT infrastructure for new offices including servers, network switches, telephony and workstations/printers for firm of managers quantity surveyors (John Licudi Consulting Ltd).</li> <li>Migration of a Microsoft Exchange setup of approx. 25 accounts to Google Apps.</li> <li>PHP/MySQL based Payroll application to automate social security/tax calculations and ability to print on pre-printed payslips.</li> <li>PHP/MySQL based leave management system allowing for leave requests to be made online.</li> </ul>"},{"location":"#sapphire-networks-gibraltar","title":"Sapphire Networks, Gibraltar","text":"<p>Head of IT Systems and Helpdesk with hands on involvement in System administration and software development and responsibility for entire server infrastructure.</p> <ul> <li>Position: IT Systems Manager</li> <li>Duration: 2005 - 2010</li> </ul> <p>Key Achievements</p> <ul> <li>Implemented RT (Request-Tracker) and Redmine as ticketing systems.</li> <li>Expanded existing virtualised infrastructure with Xen on CentOS and Citrix XenServer.</li> <li>Document Management. Produced and managed technical documentation, including procedures and documentation for disaster recovery.</li> <li>Training staff within ITS, Helpdesk and the NOC.</li> <li>Implementing solutions to recover from server failures, particularly in the provision of disaster recovery manuals/scripts for on call action.</li> <li>Application for provisioning ADSL lines on MALC DSLAMs making extensive use of Pear classes for connectivity, and extending classes to hide complexity of provisioning</li> <li>Developed system to manage On Call and NOC Shifts online (gained experience using frameworks iUI, iWebkit and jQTouch for better mobile experience).</li> </ul>"},{"location":"#gibnet-ltd-gibraltar","title":"GibNet Ltd, Gibraltar","text":"<p>Initially allocated responsibilities for Helpdesk support for GibNet customers, Desktop support and system administration. My role was later expanded to focus more on system administration and programming with emphasis on improving server infrastructure (using mod_security and scripts to monitor for vulnerable code hosting internally and by customers) and implementing more resilient services (implementing master/slave MySQL servers, paired servers for RADIUS/DNS/SMTP, and active backup servers for immediate recovery).</p> <ul> <li>Position: Systems Administrator</li> <li>Duration: 2000 - 2005</li> </ul> <p>Key Achievements</p> <ul> <li>PHP/MySQL based Gibraltar .GI Registry (WHOIS, online application forms, integrated billing and payment gateway integration).</li> <li>NAS Dial-Up Frontend. Developed frontend to view and monitor Dial-Up connections using SNMP and PHP.</li> <li>PHP/MySQL phpMyProjects. Changelog of work done on projects and servers.</li> <li>Development and maintenance of an existing user provisioning system based on C, Bash (+dialog) and Perl components.</li> <li>PHP/MySQL based Electorate Lookup web application on behalf of the Gibraltar Government to provide an online lookup tool of the electorate list for upcoming elections and 2006 Referendum.</li> <li>PHP/MySQL based frontend for RADIUS accounting data used by Helpdesk support and customer services.</li> <li>User Mode Linux as a platform for paravirtualisation deployed on a number of servers (as a precursor to newer technologies).</li> <li>MySQL/PHP/Bash backup system for a large server infrastructure based. This provided incremental rolling backups easily provisioned via configuration files with the frontend providing status of backup jobs.</li> </ul>"},{"location":"#john-licudi-partners-gibraltar","title":"John Licudi &amp; Partners, Gibraltar","text":"<p>Employed in Surveying Practice as an IT Manager with particular responsibility for desktop support, training staff and developing databases/documents for construction related projects.</p> <ul> <li>Position: IT Manager</li> <li>Duration: 1997 - 1999</li> </ul>"},{"location":"#courses","title":"Courses","text":""},{"location":"#microservices-fundamentals","title":"Microservices Fundamentals","text":"<p>  [PluralSight | pluralsight.com]  </p> <p>Core Skills</p> <ul> <li>Understanding of key principles for architecting microservice applications.</li> <li>Techniques for building scalable, flexible, resilient, and secure microservices.</li> </ul>"},{"location":"#building-microservices","title":"Building Microservices","text":"<p>  [PluralSight | pluralsight.com]  </p> <p>Core Skills</p> <ul> <li>Structuring domain logic and implementing data mapping layers.</li> <li>Testing strategies for microservices.</li> <li>Handling authentication and authorization in microservice communications.</li> <li>Skills in building maintainable, testable, and secure microservices.</li> </ul>"},{"location":"#education","title":"Education","text":"<ul> <li>University of Portsmouth: Advanced Diploma in Psychology, 1995-1997</li> <li>Chichester College: Science Foundation Course, 1994-1995</li> </ul>"},{"location":"#languages","title":"Languages","text":"<ul> <li>English: Native</li> <li>Spanish: Fluent</li> </ul>"},{"location":"#skills","title":"Skills","text":"<ul> <li>Linux (\u2605\u2605\u2605\u2605\u2605, 20+ yrs) - System administration, performance tuning for enterprise services and server management for DevOps (deployment automation, systemd services)</li> <li>Python (\u2605\u2605\u2605\u2605\u2605, 10+ yrs) - Web development, data processing, scripting</li> <li>PHP (\u2605\u2605\u2605\u2605\u2605, 10+ yrs) - Web development, data processing, scripting </li> <li>ISO 27001 (\u2605\u2605\u2605\u2605\u2606, 2+ yrs) - Experience in implementing secure development processes</li> <li>JavaScript (\u2605\u2605\u2605\u2606\u2606, 10+ yrs) - Front-end UI elements with jQuery, Bootstrap, DataTables, Basic DOM manipulation</li> <li>Bash (\u2605\u2605\u2605\u2605\u2605, 20+ yrs) - Used to automate CI/CD pipelines</li> <li>C (\u2605\u2605\u2605\u2606\u2606) - Developing command-line tools to incorporate MySQL data into MRTG; kernel patching and compiling for User Mode Linux.</li> <li>Django (\u2605\u2605\u2605\u2605\u2605, 5+ yrs) - Production-grade REST APIs, MVC apps requiring databases and admin portals</li> <li>Flask (\u2605\u2605\u2605\u2605\u2605, 5+ yrs) - Production-grade REST APIs, MVC apps</li> <li>FastAPI (\u2605\u2605\u2605\u2606\u2606, 3+ yrs) - High-performance REST APIs</li> <li>PostgreSQL (\u2605\u2605\u2605\u2606\u2606, 10+ yrs) - Schema design, queries, performance tuning</li> <li>MySQL/MariaDB (\u2605\u2605\u2605\u2605\u2605, 20+ yrs) - Schema design, queries, performance tuning</li> <li>MongoDB (\u2605\u2605\u2605\u2605\u2605, 5+ yrs) - NoSQL data storage for usage logs, microservices</li> <li>Oracle (\u2605\u2605\u2606\u2606\u2606, 10+ yrs) - Some enterprise usage, queries</li> <li>Redis (\u2605\u2605\u2605\u2606\u2606) - Used (with Python RQ) for caching data and queueing requests</li> <li>Git (\u2605\u2605\u2605\u2606\u2606, 10+ yrs) - Branching strategies, PRs, CI/CD, code reviews</li> <li>GitHub (\u2605\u2605\u2605\u2606\u2606, 5+ yrs) - Open source projects, GitHub workflows/automation and GitHub Pages</li> <li>VS Code (\u2605\u2605\u2605\u2605\u2605) - Daily dev environment, Git integration, remote development, debugging</li> <li>AI Tools (\u2605\u2605\u2605\u2606\u2606) - ChatGPT, Copilot, Grok for code suggestions, documentation, automated testing</li> <li>Regex (\u2605\u2605\u2605\u2605\u2605, 20+ yrs) - Extensive use in system administration and development</li> <li>Celery (\u2605\u2605\u2605\u2606\u2606, 5+ yrs) - Employed for asynchronous task management, sending emails, two-factor authentication codes and scheduled retrieval of data</li> <li>Nginx (\u2605\u2605\u2605\u2605\u2606, 10+ yrs) - Used with Django and Flask for reverse proxying and HTTP load balancing</li> <li>Check_MK (\u2605\u2605\u2605\u2605\u2606, 8+ yrs) - Monitoring of telecoms and internet infrastructure, environmental sensors. </li> <li>Postman (\u2605\u2605\u2605\u2605\u2606, 5+ yrs) - Incredibly useful tool for API development and security testing. </li> <li>Markdown (\u2605\u2605\u2605\u2605\u2605, 5+ yrs) - Documentation, READMEs, documentation on GitHub</li> </ul>"},{"location":"#open-source-projects","title":"Open Source Projects","text":"<ul> <li>Cockpitdecks: Contributor</li> <li>Cockpitdecks Configs: Main Developer</li> </ul>"},{"location":"projects/","title":"Projects","text":"<p>A sample of interesting projects I've worked on, some of which I have expanded on to include sequence diagrams as a visual aid. </p>"},{"location":"projects/#epg-cdr-processor","title":"EPG CDR Processor","text":"<p>  [Python | python.org]   [MongoDB | mongodb.com]   [Multiprocessing | docs.python.org]   [Systemd | systemd.io]   [ASN.1 | ncbi.nlm.nih.gov]   [XML | w3.org]   [YAML | yaml.org]  </p> <p>Developed a Python application to efficiently process and analyse Call Detail Records (CDRs). The tool parses XML-converted CDRs, extracting data points such as MSISDN, IMSI, network type, and traffic volumes, then stores these records in MongoDB for data retrieval and analysis.</p> <pre><code>sequenceDiagram\n    participant EPG as Packet Gateway\n    participant Mediation as Mediation Platform\n    participant Files as CDR File Storage\n    participant Decoder as CDR Decoder\n    participant Processor as CDR Processor\n    participant MongoDB as MongoDB\n    EPG-&gt;&gt;Mediation: SFTP Transfer to mediation\n    Mediation-&gt;&gt;Files: SFTP Transfer to file storage\n    Files-&gt;&gt;Decoder: ASN.1 to XML decoding\n    Decoder-&gt;&gt;Processor: Parsing decoded CDRs \n    Processor-&gt;&gt;MongoDB: Database storage </code></pre> <ul> <li>Custom parsing of hexadecimal data for accurate location and timestamp information.</li> <li>Multi-processing to handle large datasets concurrently (using python multiprocessing module).</li> <li>Automated file management to prevent duplicate processing.</li> <li>Error logging and handling for operational reliability.</li> </ul>"},{"location":"projects/#olm-processor","title":"OLM Processor","text":"<p>  [Python | python.org]   [MongoDB | mongodb.com]   [Multiprocessing | docs.python.org]   [Systemd | systemd.io]   [YAML | yaml.org]  </p> <p>Designed and implemented a Python-based system for processing Online Mediation platform data, managing the collection and decoding of logs from various network streams.</p> <pre><code>sequenceDiagram\n    participant OLM as Online Mediation Platform\n    participant OLM_Collector as OLM Collector\n    participant OLM_Decoder as OLM Decoder\n    participant OLM_Processor as OLM Processor\n    participant MongoDB as MongoDB\n    OLM-&gt;&gt;OLM_Collector: SFTP collection\n    OLM_Collector-&gt;&gt;OLM_Decoder: Decoding\n    OLM_Decoder-&gt;&gt;OLM_Processor: Processing\n    OLM_Processor-&gt;&gt;MongoDB: Storage</code></pre> <ul> <li>Collector utilises SFTP to fetch log files from multiple predefined streams, organizing and managing these files across local directories for processing.</li> <li>Decoder parses log filenames and content to extract timestamps, stream identifiers and MSISDN.</li> <li>Processor: Processes decoded files for storage in MongoDB.</li> </ul>"},{"location":"projects/#field-ops-portal","title":"Field Ops Portal","text":"<p>  [Python | python.org]   [Django | django.org]   [Django OTP | github.com]   [Django Two-Factor Authentication | pypi.org]   [Celery | celery.org]   [Nginx | nginx.org]   [LDAP | python-ldap.org]   [Rsyslog | rsyslog.com]  </p> <p>The main goal of this project was provide a facility that would allow providing customers with appointments in real time, without having to check back on availability, as this was provided in real time. This also included real time integration of CRM platform to retrieve and store relevant work order information.</p> <p>The approach was to create actual empty time slots per engineer and have this allocated to appointments, this avoided any chance of double booking.</p> <p>The system managed engineers, activities, time slots and appointments which were assigned to available time slots.</p> <p>For appointment confirmation and reminders, Celery was used to schedule emails based on current date and appointment dates.</p> <p>For internal use the Django Admin interface including significant modifications to show notes and time slot usage visually utilising Chart.js.</p>"},{"location":"projects/#ftth-migration-portal","title":"FTTH Migration Portal","text":"<p>TODO brief description</p>"},{"location":"projects/#ims-migration-portal","title":"IMS Migration Portal","text":"<p>TODO brief description</p>"},{"location":"projects/#mvno-sim-activator","title":"MVNO SIM Activator","text":"<p>  [Python | python.org]   [XML SOAP | w3schools.com]   [Systemd | systemd.io]  </p> <p>An automated system designed to manage and activate SIM cards by interfacing with a CRM (Customer Relationship Management) system. It monitors open activation events, processes relevant data, and executes necessary actions to complete activation workflows.</p> <pre><code>sequenceDiagram\n    participant CRM as CRM Platform\n    participant Events as Events\n    participant WorkOrders as Work Orders\n    participant Jobs as Jobs\n\n    CRM-&gt;&gt;Events: Event detection (SOAP API)\n    Events-&gt;&gt;WorkOrders: Extract access number data for activation\n    WorkOrders-&gt;&gt;Jobs: Activate work order job step and close event</code></pre>"},{"location":"projects/#mvno-usage-database","title":"MVNO Usage Database","text":"<p>  [Python | python.org]   [MySQL | mysql.com]   [XML SOAP | w3schools.com]   [Multiprocessing | docs.python.org]   [YAML | yaml.org]  </p> <p>Developed a Python-based system for collecting, processing, and storing usage data of subscribers. Utilised MySQL for database management and interfaced with an SOAP API interface to fetch subscriber usage details.</p> <pre><code>sequenceDiagram\n    participant CRS as CDR Reporting System\n    participant Collector as Collector\n    participant MySQL as MySQL Database\n\n    CRS-&gt;&gt;Collector: Collect specific data range for subscriber\n    Collector-&gt;&gt;MySQL: Store parsed data as usage records</code></pre>"},{"location":"projects/#cockpitdecks","title":"Cockpitdecks","text":"<p>  [Python | python.org]   [Loupedeck | loupedeck.com]   [Streamdeck | elgato.com]   [X-Plane | x-plane.com]   [Git | git-scm.com]   [Github | github.com]   [YAML | yaml.org]  </p> <p>Contributed to the development of Cockpitdecks, an open-source project providing a Python interface for controlling Loupedeck Live and other decks for integration with X-Plane flight simulation software.</p> <ul> <li>Diagnosed and resolved compatibility issues with Loupedeck Live on newer hardware firmware models.</li> <li>Contributed bug fixes and new features to Cockpitdecks repository.</li> <li>Established a separate repository and documentation to host a comprehensive set of aircraft configurations for use with CockpitDecks.</li> </ul>"},{"location":"projects/#sms-gateway","title":"SMS Gateway","text":"<p>  [Python | python.org]   [YAML | yaml.org]   [Django | django.org]   [Nginx | nginx.org]  </p> <p>Developed a solution to provide an API that could interface an SMS Centre. This comprised of a Portal (Django + PostgreSQL), a front end API (FastAPI) and background services (Python) that could interface directly with the SMS Centre using SMPP.</p> <pre><code>sequenceDiagram\n    participant Enduser as End Users\n    Enduser-&gt;&gt;FrontendAPI: RESTful API Client\n    participant FrontendAPI as External REST API\n    participant Django as Billing &amp; Messaging Engine\n    participant Services as Services\n    participant SMSC as SMS Centre\n    FrontendAPI-&gt;&gt;Django: Send and receive messages\n    Services-&gt;&gt;Django: Incoming messages and delivery reports\n    Services-&gt;&gt;SMSC: Transmit messages\n    Django-&gt;&gt;Services: Outgoing messages\n    SMSC-&gt;&gt;Services: Incoming messages and delivery reports</code></pre> <p>Django Rest Framework, Admin Interface, Signals used to adjust increase client balances on top up decrease on creating message.</p> <p>Django Models made use of foreign keys, extensive use of attributes such as on_delete, help_text, validators, db_index.</p> <p>Models using of clean and save functions to check for credit and save allowed adding dynamic data such as number of SMS parts required for a message.</p> <p>Heavily customised admin views.</p> <p>Developed an SMSC telnet library required to interface with SMS centre to retrieve information such as status of the SMS centre, throughput and licensing limits.</p> <p>Delivery reports were recieved via SMPP connection and sent to the Portal via Django's REST framework API.</p> <p>Services to handle incoming and outgoing messages were handled via separate listener and transmitter services connected via SMPP.</p>"},{"location":"projects/#etk-provisioning-platform","title":"ETK (Provisioning Platform)","text":"<p>TODO expanded description</p> <pre><code>sequenceDiagram\n    participant A as Flask Front End &amp; CLI Interface\n    participant B as Packages (interface libraries)\n    participant C as DB Storage (MongoDB)\n    participant D as External Interfaces\n    A-&gt;&gt;B: Load custom Python modules\n    B-&gt;&gt;C: interface configuration\n    B-&gt;&gt;D: Telnet/SOAP/RESTFul</code></pre> <p>RQ Active/Standby provisioning Provisioning of and presentation of Panic button data using SMS.</p>"},{"location":"projects/#check_mk-monitoring-system","title":"Check_MK Monitoring System","text":"<p>TODO</p>"},{"location":"projects/#mvno-number-porting","title":"MVNO Number Porting","text":"<p>  [Python | python.org]   [telnetlib | docs.python.org]   [MongoDB | mongodb.com]   [Systemd | systemd.io]   [YAML | yaml.org]   [MML (man\u2013machine language) | en.wikipedia.org]   [Multiprocessing | docs.python.org]  </p> <p>Developed a Python-based MVNO number porting mediation service for a spanish MVNO to automate the provisioning of ported numbers. This that utilises SFTP for file collection, MongoDB for data storage and parsing of CSV/gzip data files. It also required interfacing with a Flexible Number Registry via Telnet and MML to retrieve existing subscriber translations and activate new ones. Multiprocessing capability was introduced allowing multiple activators to run in parallel.</p> <pre><code>sequenceDiagram\n    participant AOPM as AOPM\n    participant Collector as Collector\n    participant FileStorage as File Storage\n    participant Importer as Importer\n    participant Database as Database (MongoDB)\n    participant Processor as Processor\n    participant Activator as Activator\n    participant FNR as Flexible Number Registry\n\n    AOPM-&gt;&gt;Collector: SFTP transfer of files\n    Collector-&gt;&gt;FileStorage: Storage of collected files\n    FileStorage-&gt;&gt;Importer: Reading data from file storage\n    Importer-&gt;&gt;Database: Saving file data to database\n    FileStorage-&gt;&gt;Processor: Translation of file data to subscriber translations\n    Processor-&gt;&gt;Database: Storing subscriber translations for activation\n    Activator-&gt;&gt;Database: Retrieving subscriber translations\n    Activator-&gt;&gt;FNR: Activation of subscriber translations    </code></pre> <p>Modular Design: Employed a modular architecture (Collector, Importer, Processor, Activator); this allowed for easier maintenance, better scalability and improved reliability.</p>"},{"location":"code/cockpitdecks-configs/","title":"Cockpitdecks configs","text":""},{"location":"code/cockpitdecks-configs/#wind-button-configuration","title":"WIND Button Configuration","text":"<p>This configuration for a WIND button in CockpitDecks uses Reverse Polish Notation (RPN) for its calculations, incorporating cosine and sine mathematical operations to visualise wind components:</p> <ul> <li>Displays: Headwind, Tailwind, Left Crosswind, and Right Crosswind</li> <li>Visuals: Yellow text, size 28, with directional symbols (\u2193, \u2191, \u2192, \u2190) for intuitive pilot reference.</li> </ul> <p>This setup enhances situational awareness by clearly indicating how wind affects the aircraft's flight path.</p> WIND DATA<pre><code>- index: 5\n  name: WIND\n  label: WIND DATA\n  label-color: Black\n  label-size: 10\n  type: none\n  annunciator:\n    size: medium\n    model: F\n    parts:\n      F0: # Headwind RPN: [Wind Direction] [Aircraft Heading] - cos [Wind Speed] *\n        color: yellow\n        text-size: 28\n        formula: \"${sim/cockpit2/gauges/indicators/wind_heading_deg_mag} ${sim/cockpit2/gauges/indicators/compass_heading_deg_mag} - cos ${sim/cockpit2/gauges/indicators/wind_speed_kts} *\"\n        text-font: fontawesome.otf\n        text: \"\u2193 ${formula}\"\n        text-format: \"{0:.0f}\"\n      F2: # Tailwind RPN: [Wind Direction] 180 + [Aircraft Heading] - cos [Wind Speed] *\n        color: yellow\n        text-size: 28\n        formula: \"${sim/cockpit2/gauges/indicators/wind_heading_deg_mag} 180 + ${sim/cockpit2/gauges/indicators/compass_heading_deg_mag} - cos ${sim/cockpit2/gauges/indicators/wind_speed_kts} *\"\n        text-font: fontawesome.otf\n        text: \"\u2191 ${formula}\"\n        text-format: \"{0:.0f}\"\n      F1: # Crosswind L RPN: [Wind Direction] 180 + [Aircraft Heading] - sin [Wind Speed] *\n        color: yellow\n        text-size: 28\n        formula: \"${sim/cockpit2/gauges/indicators/wind_heading_deg_mag} 180 + ${sim/cockpit2/gauges/indicators/compass_heading_deg_mag} - sin ${sim/cockpit2/gauges/indicators/wind_speed_kts} *\"\n        text-font: fontawesome.otf\n        text: \"\u2192 ${formula}\"\n        text-format: \"{0:.0f}\"\n      F3: # Crosswind R RPN: [Wind Direction] [Aircraft Heading] - sin [Wind Speed] *\n        color: yellow\n        text-size: 28\n        formula: \"${sim/cockpit2/gauges/indicators/wind_heading_deg_mag} ${sim/cockpit2/gauges/indicators/compass_heading_deg_mag} - sin ${sim/cockpit2/gauges/indicators/wind_speed_kts} *\"\n        text-font: fontawesome.otf\n        text: \"\u2190 ${formula}\"\n        text-format: \"{0:.0f}\"\n</code></pre>"},{"location":"code/integration/","title":"Integration","text":""},{"location":"code/integration/#hlrcluster-class","title":"HlrCluster Class","text":"<p>The HlrCluster class is designed to manage both active and standby Home Location Registers (HLRs) for mobile network operations.</p> <ul> <li>Ensures that the standby node is also provisioned with the same changes as the active node.</li> <li>Asynchronous operations using python rq and Redis avoids any potential delays in provisioning towards active node. It also allows for standby node downtime as queued jobs are retried.</li> </ul> Partial snippet of class used for HLR active/standby provisioning<pre><code>import re\nimport telnetlib\nfrom telnetlib import IAC, DO, DONT, WILL, WONT, SB, SE, TTYPE\nimport emalib\nfrom collections import OrderedDict\nimport logging\nfrom rq import Queue\nfrom redis import Redis\nfrom packages.hlr import Hlr\n\nclass HlrCluster:\n    def __init__(self, cluster_params):\n        self.active = Hlr(**cluster_params['active']['params'])\n        self.standby = Hlr(**cluster_params['standby']['params'])\n        self.rq = Queue(cluster_params['standby']['queue'], connection=Redis())\n\n    def login(self):\n        return self.active.login()\n\n    def logout(self):\n        return self.active.logout()\n\n    def get_subscriber_data(self, subscriber, parameter_type='MSISDN'):\n        return self.active.get_subscriber_data(subscriber, parameter_type)\n\n    def get_subscribers(self):\n        return self.active.get_subscribers()\n\n    def parse_subscriber_data(self, content):\n        return self.active.parse_subscriber_data(content)\n\n    def change_subscriber_profile(self, msisdn, profile):\n        result = self.active.change_subscriber_profile(msisdn, profile)\n        if self.standby.provisioning is True:\n            self.rq.enqueue(self.standby.change_subscriber_profile, msisdn, profile)\n        return result\n\n    def delete_subscriber(self, msisdn):\n        result = self.active.delete_subscriber(msisdn)\n        if self.standby.provisioning is True:\n            self.rq.enqueue(self.standby.delete_subscriber, msisdn)\n        return result\n\n    def create_subscriber(self, msisdn, imsi, profile):\n        result = self.active.create_subscriber(msisdn, imsi, profile)\n        if self.standby.provisioning is True:\n            self.rq.enqueue(self.standby.create_subscriber, msisdn, imsi, profile)\n        return result\n\n    def delete_imsi(self, imsi):\n        result = self.active.delete_imsi(imsi)\n        if self.standby.provisioning is True:\n            self.rq.enqueue(self.standby.delete_imsi, imsi)\n        return result\n\n    def delete_master_subscriber(self, msisdn):\n        result = self.active.delete_master_subscriber(msisdn)\n        if self.standby.provisioning is True:\n            self.rq.enqueue(self.standby.delete_master_subscriber, msisdn)\n        return result\n\n    def get_subscriber_pdp_contexts(self, msisdns):\n        return self.active.get_subscriber_pdp_contexts(msisdns)\n\n    def set_nam(self, msisdn, nam):\n        result = self.active.set_nam(msisdn, nam)\n        if self.standby.provisioning is True:\n            self.rq.enqueue(self.standby.set_nam, msisdn, nam)\n        return result\n\n    def set_schar(self, msisdn, schar=4):\n        result = self.active.set_schar(msisdn, schar)\n        if self.standby.provisioning is True:\n            self.rq.enqueue(self.standby.set_schar, msisdn, schar)\n        return result\n\n    def set_ssi(self, msisdn, ss):\n        result = self.active.set_ssi(msisdn, ss)\n        self.rq.enqueue(self.standby.set_ssi, msisdn, ss)\n        return result\n\n    def set_attribute(self, msisdn, attribute):\n        result = self.active.set_attribute(msisdn, attribute)\n        if self.standby.provisioning is True:\n            self.rq.enqueue(self.standby.set_attribute, msisdn, attribute)\n        return result\n\n    def set_obp(self, msisdn, obp):\n        result = self.active.set_obp(msisdn, obp)\n        if self.standby.provisioning is True:\n            self.rq.enqueue(self.standby.set_obp, msisdn, obp)\n        return result\n\n    def set_soclir(self, msisdn, soclir):\n        result = self.active.set_soclir(msisdn, soclir)\n        if self.standby.provisioning is True:\n            self.rq.enqueue(self.standby.set_soclir, msisdn, soclir)\n        return result\n\n    def get_imeisv(self, imsi):\n        return self.active.get_imeisv(imsi)\n\n    def get_mobile_subscriber_state(self, imsi):\n        return self.active.get_mobile_subscriber_state(imsi)\n\n    def set_supplementary_service(self, subscriber, ss, status, fnum=\"\", time=\"\"):\n        result = self.active.set_supplementary_service(subscriber, ss, status, fnum, time)\n        if self.standby.provisioning is True:\n            self.rq.enqueue(self.standby.set_supplementary_service, subscriber, ss, status, fnum, time)\n        return result\n\n    def enable_supplementary_service(self, subscriber, ss, fnum=\"\", time=30):\n        result = self.active.enable_supplementary_service(subscriber, ss, fnum, time)\n        if self.standby.provisioning is True:\n            self.rq.enqueue(self.standby.enable_supplementary_service, subscriber, ss, fnum, time)\n        return result\n\n    def disable_supplementary_service(self, subscriber, ss):\n        result = self.active.disable_supplementary_service(subscriber, ss)\n        if self.standby.provisioning is True:\n            self.rq.enqueue(self.standby.disable_supplementary_service, subscriber, ss)\n        return result\n\n    def enable_forwarding_service(self, msisdn, fnum, ss, time=None):\n        result = self.active.enable_forwarding_service(msisdn, fnum, ss, time)\n        if self.standby.provisioning is True:\n            self.rq.enqueue(self.standby.enable_forwarding_service, msisdn, fnum, ss, time)\n        return result\n\n    def disable_forwarding_service(self, msisdn, ss):\n        result = self.active.disable_forwarding_service(msisdn, ss)\n        if self.standby.provisioning is True:\n            self.rq.enqueue(self.standby.disable_forwarding_service, msisdn, ss)\n        return result\n</code></pre>"}]}